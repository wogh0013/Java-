지네릭스 : 다양한 타입의 객체들을 다루는 메서드나 컬렉션 클래스에 컴파일 시의 타입체크를 해주는 기능.
		 객체의 타입을 컴파일 시에 체크 -> 객체의 타입 안정성(형변환 오류 ↓)을 높이고 형변환의 번거로움이 줄어든다.
		 
	ex) ArrayList : 다양한 종류의 객체를 담을 수 있다. -> 보통 한 종류의 객체를 담는 경우 多
					-> 꺼낼 때마다 타입체크를 하고 형변환하면 불편 / 원하지 않는 종류의 객체가 포함되는 것을 막을 방법X
					=> 지네릭스가 해결해줌 !!
					
	지네릭스의 제한
	 - static 멤버에 지네릭스 타입 변수 사용 X -> static 은 모든 객체에 동일하게 동작해야 하므로
	 - 지네릭 타입의 배열 선언 X    new T[itemArr.length] <- 이런 거 X //// T[] itemArr <- 이런 건 O
	 
	제한된 지네릭 클래스
	 - extends로 상속을 사용하면, 특정 타입의 자손들만 대입할 수 있다.
	 	(타입 매개변수 T에 지정할 수 있는 타입의 종류를 제한)
	 	class FruitBox<T extends Fruit>{}
	 	
	 	<? extends T>  와일드 카드의 상한 제한. T와 그 자손들만 가능
	 	<? super T>    와일드 카드의 하한 제한. T와 그 조상들만 가능
	 	<?>			   제한없음. 모든 타입 가능.
	 	
	지네릭 메서드 : 메서드의 선언부에 지네릭 타입이 선언된 메서드
	 - 이 타입 매개변수는 메서드 내에서만 지역적으로 사용됨 -> static이어도 상관없음
	 
	 
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
열거형(enums) : 서로 관련된 상수를 편리하게 선언하기 위한 것. (여러 상수를 정의할 때 사용하면 유용함)

enums 열거형이름 {상수명1, 상수명2, ...};



애너테이션 : 주석

표준 애너테이션
 @Override : 메서드 앞에만 붙일 수 있음, 조상의 메서드를 오버라이딩하는 것이라는 걸 컴파일러에게 알려줌.
 @Deprecated : 앞으로 사용하지 말 것을 권장.
 @SuppressWarnings : 컴파일러의 특정 경고 메시지가 나타나지 않게 해줌.
 @SafeVarargs : 지네릭스 타입의 가변인자에게 사용.
 @FunctionalInterface : 함수형 인터페이스라는 것을 알림
 @Native : native메서드에서 참조되는 상수 앞에 붙임.
 @....										