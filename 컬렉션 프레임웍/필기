컬렉션 프레임웍 : 데이터 군을 저장하는 클래스들을 표준화한 설계

핵심 인터페이스 : 	Collection
   			  ↗           ↖           Map
   		    List          Set
   		    
1. List : 순서가 있는 데이터의 집합 (데이터 중복 O) -> 순서가 있으므로 데이터 중복 O
	└ ArrayList, LinkedList, Stack 등	
	
2. Set  : 순서가 없는 데이터의 집합 (데이터 중복 X) -> 순서가 없으므로 데이터 중복 X
	└ HashSet, TreeSet 등
	
3. Map  : 키, 값(key, value)의 쌍으로 이루어진 데이터의 집합
		  순서 X / 키는 중복X, 값은 중복O (중복X, 중복O)
	└ HashMap, TreeMap, Properties 등
		  
 - List인터페이스 : 중복을 허용하면서, 저장순서가 유지
 - Set인터페이스  : 중복을 허용하지 않고, 저장순서가 유지되지 않음
 - Map인터페이스  : 키와 값을 하나의 쌍으로 묶어서 저장 (중복X, 중복O)
 
 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
 ArrayList : 가장 많이 사용 !
 - List인터페이스 구현 -> 데이터의 저장순서가 유지되고, 중복이 허용된다.
 
 LinkedList : 배열의 단점을 보완하기 위해 만들어진 자료구조,
 			  불연속적으로 존재하는 데이터를 서로 연결한 형태로 구성.
 - 삭제 : 1, 2, 3이 있을 때 2를 삭제하고 싶으면 -> 1이 3을 참조하도록 바꾸면 됨.
 - 추가 : 1,    3이 있을 때 2를 추가하고 시프면 -> 1이 2를 참조하게 하고, 2가 3을 참조하게 하면 됨.
 
 - 이동방향이 단방향이다. 다음 요소에 대한 접근 good / but 이전 요소에 대한 접근 bad
     -> 보완하기 위해 더블 링크드 리스트(이중 연결리스트)가 나옴. -> 이전 요소에 대한 참조도 가능.
     class Node{
     	Node next;		//다음 요소의 주소를 저장
     	Node prevous;	//이전 요소의 주소를 저장
     	Object obj;		//데이터를 저장
     }
     
결론 
1. 순차적으로 추가/삭제하는 경우는    ArrayList > LinkedList
2. 중간 데이터를 추가/삭제하는 경우는  ArrayList < LinkedList
3. 데이터 개수의 변경이 잦다면		   ArrayList < LinkedList    

   컬렉션		읽기(접근시간)		추가/삭제				비고
ArrayList	   빠르다			 느리다		순차적인 추가삭제는 더 빠름 / 비효율적인 메모리 사용
LinkedList	   느리다			 빠르다		데이터가 많을수록 접근성이 떨어짐 

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
Stack과 Queue

1. 스택 : LIFO(Last In Fist Out) 구조
2. 큐  : FIFO(First In First Out) 구조

스택에 0, 1, 2의 순서로 데이터를 넣음 -> 2, 1, 0순으로 나옴
큐에  0, 1, 2의 순서로 데이터를 넣음 -> 0, 1, 2순으로 나옴

스택 - ArrayList가 적합 (순차적으로 데이터를 추가/삭제)
큐  - LinkedList가 적합 (큐는 데이터를 꺼낼 때 항상 첫 번째 저장된 데이터를 삭제 -> 데이터 개수 변화 多)

PrirorityQueue : 저장한 순서에 관계없이 우선순위가 높은 것부터 꺼낸다. (null 저장 못함)
				 배열을 저장공간으로 사용, 각 요소를 힙이라는 자료구조 형태로 저장

Dequeue : 양쪽 끝에 추가/삭제가 가능하다. (Queue는 한쪽 끝으로만 추가/삭제 가능)

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
ListIterator > Iterator > Enumeration(기능순) : 컬렉션에 저장된 요소를 접근하는데 사용되는 인터페이스.

1. Iterator
 - 컬렉션에 저장된 요소들을 읽어오는 방법을 표준화.
 - 코드의 재사용성이 높아짐
 - 컬렉션의 요소에 접근할 때 단방향 이동

2. ListIterator
 - Iterator를 상속받아서 기능을 추가한 것
 - 컬렉션의 요소에 접근할 때 양방향 이동
 - 단, ArrayList나 LinkedList와 같이 List인터페이스를 구현한 컬렉션에서만 사용할 수 있다.
 -> List를 구현한 경우에 양방향 조회 가능
 -> 다음 요소, 이전 요소를 구현하기 전에 반드시 hasNext(), hasPrevious()를 통해 이동할 수 있는지 확인.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
Arrays 클래스 : 배열을 다루는 데 유용한 메서드가 정의

배열의 복사 : Arrays.copyOf(), Arrays.copyOfRange()
배열 채우기 : Arrays.fill(), Arrays.setAll()
배열의 정렬 : Arrays.sort()
배열의 검색 : Arrays.binarySearch()
배열의 비교 : Arrays.equals()
배열의 출력 : Arrays.toString() -> 배열의 모든 요소를 문자열로 출력
배열을 List로 변환 : Arrays.asList() -> 배열을 List에 담아서 반환.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
Comparator, Comparable : 인터페이스로 컬렉션을 정렬하는데 필요한 메서드를 정의.

두 객체를 비교
1.  compare()  : 두 객체 같으면 0, 비교하는 값보다 작으면 음수, 크면 양수
2. compareTo() : 두 객체 같으면 0, 비교하는 값보다 작으면 음수, 크면 양수 (반환값 int) 

Comparable : 기본 정렬기준을 구현하는 데 사용
Comparator : 다른 기준으로 정렬하고자 할 때 사용

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
HashSet : Set인터페이스를 구현한 컬렉션, 중복 요소 저장 X, 저장 순서 유지 X
			-> 저장 순서를 유지하려면 LinkedHashSet 사용
		  순서가 없으므로 get() 메서드가 없다. -> Iterator로 순회한다.

TreeSet : 이진 검색 트리라는 자료구조의 형태로 데이터를 저장하는 클래스,
		  - 중복 데이터 X, 정렬된 위치에 저장하므로 저장순서 X
		  - 여러 개의 노드가 연결된 형태
		  - 각 노드에 최대 2개의 노드 연결 가능(부모 노드 - 자식 노드 ///// 최상위 부모 노드 : root)
		  class TreeNode{
		  	TreeNode left;  //왼쪽 자식노드
		  	Object element; //객체를 저장하기 위한 참조변수
		  	TreeNode right; // 오른쪽 자식노드
		  	
 		  - 이진 검색 트리 : 부모노드의 왼쪽  - 작은 값           5
 		                  부모노드의 오른쪽 - 큰 값        1       7
						-> 노드의 추가/삭제에 시간이 걸린다.(순차적으로 저장하지 않으므로)
						-> 검색(범위검색)과 정렬에 유리하다.
						-> 중복된 값을 저장하지 못한다.
						
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
HashTable은 HashMap의 구버전이므로 사용 지양

HashMap : Map을 구현했다 -> 키, 값을 묶어서 하나의 데이터로 저장. (키, 값) -> 중복허용 (X, O)
 					  -> 키는 저장된 값을 찾는데 사용하는 것 -> 키는 유일해야 한다 !
					  -> 해싱을 사용하기 때문에 많은 양의 데이터 검색 good! 

해싱 : 해시함수를 이용해서 데이터를 해시테이블에 저장하고 검색하는 기법이다.
       데이터 -----------저장, 검색 by 해시함수---------->해시테이블
      데이터가 저장돼있는 곳을 알려주기 때문에 다량의 데이터 속에서도 원하는 데이터를 빠르게 찾을 수 있다.


TreeMap : 이진 검색 트리의 형태로 키, 값의 쌍으로 이루어진 데이터를 저장한다.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
Properties : HashTable을 상속받아 구현한 것.
			HashTable은 키와 값을 (Object, Object) 형태로 저장하는데,
			Properties는 키와 값을 (String, String) 형태로 저장한다.
			주로 애플리케이션 환경설정과 관련된 속성을 저장하는데 사용. 간단한 입출력에 good.
			
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
Collections : 컬렉션과 관련된 메서드 제공

컬렉션의 동기화 
 - 멀티 쓰레드 프로그래밍 : 하나의 객체를 여러 쓰레드가 동시에 접근 가능
 						-> 공유되는 객체에 동기화 필요 for 데이터의 일관성 유지
 						but 동기화는 멀티쓰레드 이외에는 성능이 떨어뜨리는 요인이 되므로, 동기화 메서드를 따로 제공.
 									






   		     