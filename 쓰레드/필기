프로그램을 실행 -> OS로부터 실행에 필요한 자원(메모리)을 할당받아 프로세스가 된다.

프로세스 : 실행 중인 프로그램
 - 자원 + 쓰레드     //자원 : 프로그램을 수행하는 데 필요한 데이터와 메모리
 				  //쓰레드 : 자원을 이용하여 실제로 작업을 수행하는 것 (프로세스 안에서 일을 하는 '일꾼') 
 - 모든 프로세스에는 최소한 하나 이상의 쓰레드가 존재
 	둘 이상의 쓰레드를 가진 프로세스 -> 멀티쓰레드 프로세스 		

 - 쓰레드가 작업을 하기 위해서 메모리 공간(호출스택)을 필요로 함
     -> 프로세스의 메모리 한계에 따라 생성 가능한 쓰레드의 수가 결정됨

 - 멀티태스킹 : 여러 개의 프로세스가 동시에 실행됨
 - 멀티쓰레딩 : 하나의 프로세스 내에서 여러 쓰레드가 동시에 작업을 수행함
     └ 장점 1. CPU의 사용률 향상
     	   2. 자원의 효율적 사용
     	   3. 사용자에 대한 응답성 향상
     	   4. 작업 분리 -> 코드 간결

쓰레드 구현 방법
 - Thread클래스 상속받기
 - Runnable인터페이스 구현 (多)      	   

쓰레드의 실행 : start() 호출
 - t1.start();
 - t2.start();
 
 run()   : 단순히 클래스에 선언된 메서드를 호출하는 것뿐(생성된 쓰레드를 실행시키는 것이 아님)
 start() : 새로운 쓰레드가 작업을 실행하는데 필요한 호출스택을 생성 -> run() 호출
 
main쓰레드 : main메서드의 작업을 수행하는 것.

쓰레드는 우선순위(priority)라는 속성(멤버변수)을 갖고 있다.
 : 작업의 중요도에 따라 우선순위 지정 -> 특정 쓰레드가 더 많은 작업시간을 가짐
 
 
데몬 쓰레드 : 다른 일반 쓰레드의 작업을 돕는 '보조 역할'의 쓰레드.

쓰레드의 상태
 - NEW : 쓰레드 생성, 아직 start() 호출 X
 - RUNNABLE : 실행 중 or 실행 가능한 상태
 - BLOCKED : 일시정지 (by 동기화블럭)
 - WAITING(TIME_WAITING) : 일시정지 (쓰레드의 작업 종료 X, but 실행가능하지 않은 일시정지 상태)
 - TERMINATED : 쓰레드의 작업이 종료된 상태

sleep() : 지정된 시간 동안 쓰레드를 멈추게 한다.

suspend() : 쓰레드를 멈추게 한다.
resume()  : suspend()에 의해 멈춘 쓰레드를 다시 실행대기 상태로 만들어준다.
stop()    : 호출되는 즉시 쓰레드가 종료된다.

interrupt(), interrupted() : 쓰레드의 작업을 취소한다. 

yield() : 자신의 실행시간으르 다른 쓰레드에게 양보한다.

join() : 자신이 하던 작업을 멈추고, 다른 쓰레드가 작업하는 것을 기다린다.




