- 상속 : 기존의 클래스를 재사용하여 새로운 클래스를 작성하는 것이다.
 1) 적은 양의 코드로 새로운 클래스를 작성할 수 있다.
 2) 코드의 추가 및 변경이 용이하다. by 공통 관리
 3) 재사용성, 코드 중복 제거, 생산성과 유지보수성

class parent{ // }; 
class 자식클래스명 extends 부모클래스명 {
	//
};

- 자바에서는 단일 상속만 허용한다.(다중 상속X)
	class TVCR extends TV;
	
- 모든 클래스의 조상 : Object 클래스

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
*** - 오버로딩 : 한 클래스 내에 같은 이름의 메서드를 여러 개 정의하는 것이다.
		   하나의 메서드 이름으로 여러 기능을 구현하는 것.
- 오버라이딩 : 부모	클래스로부터 상속받은 메서드의 내용을 변경하는 것.
			상속받은 메서드를 그대로 사용하기도 하지만, 자식 클래스 자신에 맞게 변경해야 하는 경우에 부모의 메서드를 오버라이딩한다.
	└ 조건 1. 오버라이딩 대상의 메서드와 이름이 같아야 한다.
		  2.                      매개변수가 같아야 한다.
		  3.                      반환타입이 같아야 한다.
		           => 선언부가 일치해야 한다.
	└ 주의점 1. 접근 제어자를 부모 클래스의 메서드보다 좁은 범위로 변경할 수 없다.(자식 클래스의 접근 제어자는 부모 클래스와 같거나 넓은 범위임)

** 오버로딩(overloading) : 기존에 없는 메서드를 새로 정의하는 것.(new)
** 오버라이딩(overriding) : 상속받은 메서드의 내용을 변경하는 것.(change, modify)

- super : 자식 클래스에서 부모 클래스로부터 상속받은 멤버를 참조하는데 사용되는 참조변수이다.
		 상속받은 멤버와 자식클래스 멤버의 이름이 같을 때 super를 붙여서 구별한다.
- this : 멤버변수와 지역변수의 이름이 같을 때 this를 붙여서 구별한다.
- super와 this 함수는 인스턴스 메서드에서만 사용(static 메서드와 관련x)

- super() : 부모 클래스의 생성자를 호출하는데 사용
- this() : 같은 클래스의 다른 생성자를 호출하는데 사용
		
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
- 패키지(package) : 클래스의 묶음, 클래스 또는 인터페이스를 포함.
				  서로 관련된 클래스들끼리 그룹 단위로 묶어놓음 -> 클래스를 효율적으로 관리 Okay
	1) 모든 클래스는 반드시 하나의 패키지에 속해야 한다.
	2) 패키지는 점(.)을 구분자로 하여 계층구조로 구성할 수 있다.
	3) 패키지는 물리적으로 클래스 파일(.class)을 포함하는 하나의 디렉토리이다.

- import문 : 다른 패키지의 클래스를 사용하기 위해 선언해준다.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
- 제어자 : 클래스, 변수 또는 메서드의 선언부에 함께 사용되어 부가적인 의미를 부여한다.
- 접근 제어자 : public > protected > default > private
	└ private : 같은 클래스 내에서만 접근 가능 
	└ default : 같은 패키지 내에서만 접근 가능
	└ protected : 같은 패키지 내에서, 그리고 다른 패키지의 자식 클래스에서 접근 가능
	└ public : 접근 제한이 전혀 없다. 막 써~
- 접근제어자를 사용하는 이유 : 외부로부터 데이터를 보호, (private을 사용하면 외부에서 직접 접근 X)
						 외부에는 불필요한 부분을 감추기 위해	
						 
- setter : 'set멤버변수이름'
			멤버변수의 값을 변경하는 메서드의 이름
- getter : 'get멤버변수이름'
			멤버변수의 값을 읽는 메서드의 이름			

- static : 클래스 변수(static 변수)는 인스턴에 관계없이 같은 값을 가진다.
- final : 변수에 사용되면 상수가 된다.(값 변경 X)
		  메서드에 사용되면 오버라이딩 X
		  클래스에 사용되면 다른 클래스의 조상(부모)이 될 수 없다.(확장 X)
		  
- 추상 메서드 : 메서드의 선언부만 작성, 안의 내용은 구현 X
- abstract : 추상 메서드를 선언하는데 사용된다. (클래스, 메서드에 사용 가능)
	└ 클래스에 사용 : 클래스 내에 추상 메서드가 존재함.
	  메서드에 사용 : 선언부만 작성, 구현부는 작성 X인 추상 메서드임을 선언함.

- 제어자의 조합
	1) 메서드에 static과 abstract를 동시에 사용할 수 없다. (static 메서드는 구현부가 있어야 한다.)
	2) 클래스에 final과 abstract를 동시에 사용할 수 없다.
	3) abstract 메서드의 접근 제어자가 private일 수 없다.
		(abstract메서드는 자식 클래스에서 구현해주어야 하는데, private이면 자식 클래스에서도 접근할 수 없기 때문에)
	4) 메서드에 private과 final을 같이 사용할 필요 X (접근 제어자가 private이면 오버라이딩 불가)
	
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
- 다형성 : 자바에서는 한 타입의 참조변수로 여러 타입의 객체를 참조할 수 있도록 하여 다형성을 구현하였다.
		  (부모클래스 타입의 참조변수로 자식클래스의 인스턴스를 참조할 수 있도록 하였다.)
- 참조변수가 사용할 수 있는 멤버의 개수 <= 인스턴스의 멤버 개수

- 참조변수의 형변환
	1)  Upcasting  : 자식타입 -> 부모타입 (형변환 생략 가능)
	2) Downcasting : 부모타입 -> 자식타입 (형변환 생략 불가)  
	
- 형변환 : 참조변수의 타입을 변환하는 것, 인스턴스를 변환하는 것은 X
			-> 인스턴스에 아무런 영향X
			-> 참조하고 있는 인스턴스에서 사용할 수 있는 멤버의 범위(개수)를 조절하는 것뿐이다.
			
- instanceof 연산자 : 참조변수가 참조하고 있는 인스턴스의 실제 타입을 알아보기 위해 주로 조건문에서 사용한다.
	└ 사용법 : 참조변수 instanceof 타입(클래스명->피연산자)
	└ 결과값으로 boolean값인 true나 false를 반환한다.
	   true이면 참조변수가 검사한 타입으로 형변환이 가능하다는 것이다.	
	   
	  		 		  			 	           		
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
- 클래스 : 설계도 -> 추상 클래스 : 미완성 설계도
- 추상 클래스 : 인스턴스 생성 X, 상속을 통한 자식클래스에 의해서만 완성될 수 있다.
- abstract 키워드를 붙여 추상 클래스임을 선언할 수 있다. (abstract class 클래스명 {...} )
- 추상 메서드 : 선언부 O, 구현부 X -> 설계만 해놓고, 실행될 부분은 작성 X
  └ 부모클래스에서 선언부만 작성 후 주석으로 어떤 기능을 할지만 알려주고,
    자식클래스(상속된 클래스)에서 구현부를 작성하여 실제 작동할 기능을 작성한다.
- 추상 메서드는 구현부가 없으므로 {}대신 ;을 작성한다.

abstract class Player{
	abstract void play(int pos);
	abstract void stop(); 	  
}			 		  			 	           		
	  		 		  			 	           		
	  		 		  			 	           		
	  		 		  			 	           		
	  		 		  			 	           		
	  		 		  			 	           		
	  		 		  			 	           		
	  		 		  			 	           		